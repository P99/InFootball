div#metadata
  div#teams

script
  | var socket3 = io( document.location.hostname + ':' + port + '/operator' );
  | $( "#teams" ).jtable({
  |   title: "Teams",
  |   jqueryuiTheme: true,
  |   actions: {
  |     listAction: function(response, options){
  |       return {
  |         "Result": "OK",
  |         "Records": response.team
  |       };
  |     },
  |     createAction: function(postData) {
  |       var team = extract(postData);
  |       socket.emit('message', { method: "CREATE", uri: "team/new", data: team });
  |       return {
  |         "Result": "OK",
  |         "Record": team
  |       }; 
  |     },
  |     updateAction: function(postData) {
  |       var team = extract(postData);
  |       socket.emit('message', { method: "UPDATE", uri: "team/" + team._id, data: team });
  |       return {
  |         "Result": "OK"
  |       }
  |     },
  |     deleteAction: function(team){
  |       socket.emit('message', { method: "DELETE", uri: "team/" + team._id, data: team });
  |       return {
  |         "Result": "OK"
  |       };
  |     }
  |   },
  |   fields: {
  |     _id: {
  |       key: true,
  |       list: false
  |     },
  |     logo: {
  |       title: "Logo",
  |       display: function(team) {
  |         return $('<img src="' + team.record.logo + '"></img>');
  |       }
  |     },
  |     name: {
  |       title: "Equipe"
  |     },
  |     coach: {
  |       title: "Entraineur"
  |     },
  |     president: {
  |       title: "President"
  |     },
  |     stadium: {
  |       title: "Stade"
  |     }
  |   }
  | }); // End "#teams" jtable
  | var ref3 = $( "#teams" );
  | var response3 = {};
  | socket.on('message', function(msg) {
  |   if ((msg.method == "UPDATE") && (msg.uri == "team")) {
  |     console.log("[Team] received: " + JSON.stringify(msg));
  |     if (!response2.team) {
  |       response3.team = msg.data;
  |       ref3.jtable("load", response3);
  |     } else {
  |       response3.team = msg.data;
  |       ref3.jtable("reload");
  |     }
  |   }
  | });
  | // Utility
  | function extract(uri) {
  |   var data = {}, token;
  |   var pairs = uri.split("&");
  |   pairs.forEach( function(key) {
  |     token = key.split("=");
  |     data[token[0]] = unescape(token[1]);
  |   });
  |   return data;
  | }