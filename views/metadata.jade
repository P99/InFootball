div#metadata
  div#teams
  div#players

script
  | // Todo: pass the 'port' variable in the tube?
  | $( function() {
  | var socket = io( document.location.hostname + ':' + port + '/operator' );
  | var context = {
  |   teams: { root: "" },
  |   players: { root: "" }
  | };
  | var promises = {};
  | $( "#teams" ).jtable({
  |   title: "Equipes",
  |   jqueryuiTheme: true,
  |   actions: {
  |     listAction: function(postData, options) {
  |       return emit("READ", "teams/any");
  |     },
  |     createAction: function(postData) {
  |       var data = extract(postData);
  |       return emit("CREATE", "teams/new", data);
  |     },
  |     updateAction: function(postData) {
  |       var data = extract(postData);
  |       return emit("UPDATE", "teams/" + data._id, data);
  |     },
  |     deleteAction: function(data){
  |       return emit("DELETE", "teams/" + data._id, data);
  |     }
  |   },
  |   fields: {
  |     _id: {
  |       key: true,
  |       list: false
  |     },
  |     logo: {
  |       title: "Logo",
  |       display: function(team) {
  |         return $('<img src="' + team.record.logo + '"></img>');
  |       }
  |     },
  |     name: {
  |       title: "Equipe"
  |     },
  |     coach: {
  |       title: "Entraineur"
  |     },
  |     president: {
  |       title: "President"
  |     },
  |     stadium: {
  |       title: "Stade"
  |     },
  |     players: {
  |       title: "Joueurs",
  |       edit: false,
  |       create: false,
  |       display: function(team) {
  |         var $button = $('<button />');
  |         $button.button({ 
  |           icons: { secondary: "ui-icon-triangle-1-e" },
  |           label: "edit"
  |         }).click(function() {
  |           console.log("Editing team/" + team.record._id + "/players/");
  |           context["players"].root = "teams/" + team.record._id + "/";
  |           $( "#teams" ).hide();
  |           $( "#players" ).jtable('load').show();
  |           $( "#players" ).find('.jtable-title-text').html("Equipes / " + team.record.name + " / Joueurs");
  |         });
  |         return $button;
  |       }
  |     }
  |   }
  | }); // End "#teams" jtable
  | //
  | $( "#players" ).jtable({
  |   title: "Joueurs",
  |   jqueryuiTheme: true,
  |   toolbar: {
  |     items: [{
  |       text: 'Back',
  |       click: function () {
  |           root = "";
  |           $( "#players" ).hide();
  |           $( "#teams" ).show();
  |       }
  |     }]
  |   },
  |   actions: {
  |     listAction: function(postData, options) {
  |       return emit("READ", "players/any");
  |     },
  |     createAction: function(postData) {
  |       var data = extract(postData);
  |       return emit("CREATE", "players/new", data);
  |     },
  |     updateAction: function(postData) {
  |       var data = extract(postData);
  |       return emit("UPDATE", "players/" + data._id, data);
  |     },
  |     deleteAction: function(data){
  |       return emit("DELETE", "players/" + data._id, data);
  |     }
  |   },
  |   fields: {
  |     _id: {
  |       key: true,
  |       list: false
  |     },
  |     photo: {
  |       title: "Photo",
  |       display: function(model) {
  |         return $('<img src="' + model.record.photo + '"></img>');
  |       }
  |     },
  |     name: {
  |       title: "Nom"
  |     },
  |     nationality: {
  |       title: "Pays"
  |     },
  |     age: {
  |       title: "Age"
  |     },
  |     position: {
  |       title: "Poste"
  |     },
  |     number: {
  |       title: "Maillot"
  |     }
  |   }
  | }).hide(); // End "#players" jtable
  | //
  | $( "#teams" ).jtable("load", {});
  | socket.on('message', function(msg) {
  |   if (promises[msg.token]) {
  |     var data = {};
  |     data["Result"] = "OK";
  |     if (msg.data instanceof Array) {
  |       data["Records"] = msg.data;
  |     } else if (msg.data instanceof Object) {
  |       data["Record"] = msg.data;
  |     }
  |     promises[msg.token].resolve(data);
  |     delete promises[msg.token];
  |   }
  |   else {
  |     var model = modelLast(msg.uri);
  |     var ref = $("#" + model);
  |     switch (msg.method) {
  |     case "CREATE":
  |       ref.jtable('addRecord', {record: msg.data, clientOnly: true });
  |       break;
  |     case "UPDATE":
  |       ref.jtable('updateRecord', {record: msg.data, clientOnly: true });
  |       break;
  |     case "DELETE":
  |       ref.jtable('deleteRecord', {key: msg.data._id, clientOnly: true });
  |       break;
  |     }
  |   }
  | });
  | function emit(_method, _uri, _data) {
  |   var model = _uri.split("/")[0];
  |   var _token = token();
  |   socket.emit('message', { method: _method, uri: context[model].root + _uri, token: _token, data: _data });
  |   return $.Deferred(function (promise) {
  |     promises[_token] = promise;
  |   });
  | } 
  | //
  | //
  | // Utility
  | function extract(uri) {
  |   var data = {}, token;
  |   var pairs = uri.split("&");
  |   var decode = "";
  |   pairs.forEach( function(key) {
  |     token = key.split("=");
  |     data[token[0]] = decodeURIComponent(token[1].replace(/\+/g, " "));
  |   });
  |   return data;
  | }
  | // Generate a random token
  | function token() {
  |   return Math.random().toString(36).substr(2);
  | }
  | function modelLast(uri) {
  |   var tmp = uri.split("/");
  |   var len = tmp.length;
  |   var model = (len % 2) ? tmp[len-1] : tmp[len-2];
  |   console.log("Model: uri=" + uri + " > " + model);
  |   return model;
  | }
  | });