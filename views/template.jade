extends admin

append style
  | #dialog-link {
  |   padding: .4em 1em .4em 20px;
  |   text-decoration: none;
  |   position: relative;
  | }
  | #dialog-link span.ui-icon {
  |   margin: 0 5px 0 0;
  |   position: absolute;
  |   left: .2em;
  |   top: 50%;
  |   margin-top: -8px;
  | }
  | .editable {
  |   margin: 0 0 0 5px;
  |   display: inline-block;
  |   width: 100px;
  |   border: 1px dashed grey;
  | }
  | .caption {
  |   text-transform:capitalize;
  |   display: inline-block;
  | }
  | ul {
  |    list-style-type: none;
  |    padding-left: 0px;
  |    margin-left: 0px;
  | }
  | li {
  |   list-style: none;
  | }
  | li:nth-child(odd) {
  |   background-color: white;
  | }
  | li:nth-child(even) {
  |   background-color: #F8F8F8;
  | }

block template
  p
    a#dialog-link(href='#', class='ui-state-default ui-corner-all')
      span(class='ui-icon ui-icon-newwin')
      |  Create template
  div#dialog(title='New template...')
    div#template-editor

block users
  div#users

  script
    | $( "#users" ).jtable({
    |   title: "Users",
    |   actions: {
    |           listAction: function(users, options){
    |             return {
    |                "Result": "OK",
    |                "Records": users,
    |                "TotalRecordCount": 2
    |             };
    |           },
    |           createAction: function(postData){
    |             console.log("create data:" + postData);
    |             var user = {};
    |             var pairs = postData.split("&");
    |             pairs.forEach( function(key) {
    |               var token = key.split("=");
    |               user[token[0]] = token[1];
    |             });
    |             console.log("user: " + JSON.stringify(user));
    |             socket.emit('admin', {method: "PUT", uri: "users/new", data: user});
    |             return {
    |               "Result": "OK",
    |               "Record": obj
    |             };
    |           },
    |           updateAction: function(data){ console.log("updateAction"); },
    |           deleteAction: function(user){
    |             console.log("deleteAction: " + JSON.stringify(user));
    |             socket.emit('admin', {method: "DELETE", uri: "users/" + user._id, data: user});
    |             return {
    |               "Result": "OK"
    |             };
    |           }
    |       },
    |   fields: {
    |      _id: {
    |          key: true,
    |          create: false,
    |          edit: false,
    |          list: false
    |      },
    |      username: {
    |          title: "Login",
    |          width: "25%"
    |      },
    |      password: {
    |          title: "Password",
    |          type: 'password',
    |          list: false
    |      },
    |      email: {
    |          title: "Email",
    |          width: "25%"
    |      },
    |      firstName: {
    |          title: "First name",
    |          width: "25%"
    |      },
    |      lastName: {
    |          title: "Last name",
    |          width: "25%"
    |      }
    |   }
    | });
    | socket.emit('admin', {method: "GET", uri: "users", data: {}});
    | socket.on('admin', function(msg) {
    |   if ((msg.method == "GET") && (msg.uri == "users")) {
    |     $( "#users" ).jtable("load", msg.data);
    |   }
    | });

append jquery
  | $( "#dialog-link" ).click(function( event ) {
  |   socket.emit('template', {method: "GET", uri: "templates/any?schema", data: {}});
  |   $( "#dialog" ).dialog( "open" );
  |   event.preventDefault();
  | });
  | $( "#dialog" ).dialog({
  |   autoOpen: false,
  |   width: 400,
  |   buttons: [
  |     {
  |       text: "Ok",
  |       click: function() {
  |         var template = {};
  |         // Todo: parse the dom and rebuild the template object
  |         var template = {title: "Football", teams:[ "PSG", "OM" ], contexts: [ "Possede le ballon", "Ne possede pas le ballon"]};
  |         socket.emit('template', {method: "PUT", uri: "templates/new", data: template});
  |         $( this ).dialog( "close" );
  |       }
  |     },
  |     {
  |       text: "Cancel",
  |       click: function() {
  |         $( "#template-editor" ).empty();
  |         $( this ).dialog( "close" );
  |       }
  |     }
  |   ]
  | });
  | // Hover states on the static widgets
  | $( "#dialog-link, #icons li" ).hover(
  |   function() {
  |     $( this ).addClass( "ui-state-hover" );
  |   },
  |   function() {
  |     $( this ).removeClass( "ui-state-hover" );
  |   }
  | );
  | // Populate the widget according to the schema
  |   socket.on('template', function(msg) {
  |     for (key in msg.data) {
  |       switch(typeof msg.data[key]) {
  |       case "string":
  |         $( "#template-editor" ).append("<div class='caption'>" + key + ":</div><div class='editable'>" + msg.data[key] + "</div>");
  |         $( "#template-editor" ).find( ".editable" ).editable(  function(value) { return value },
  |         {
  |           type    : 'text',
  |           submit  : 'OK',
  |           select  : true,
  |           placeholder: '...'
  |         });
  |         break;
  |       case "object":
  |         if (msg.data[key] instanceof Array) {
  |           // Todo: recurse array elements
  |           var str = "<fieldset>";
  |           str += "<legend class='caption'>" + key + "</legend>";
  |           str += "<div display='block'>";
  |           str += "<ul></ul>";
  |           str += "<span class='clickable ui-icon ui-icon-circle-plus' style='display: inline-block' />";
  |           str += "</div>"
  |           str += "</fieldset>";
  |           $( "#template-editor" ).append(str);
  |         }
  |         break;
  |       }
  |     }
  |     $( "#template-editor" ).find( ".clickable" ).click(function(event) {
  |       console.log("click handler");
  |       var str = "<li>";
  |       str += "<span class='ui-icon ui-icon-triangle-1-e' style='display: inline-block' />";
  |       str += "<div class='editable'></div>";
  |       str += "</li>";
  |       $(event.target).parent().find( "ul" ).append(str);
  |       $(event.target).parent().find( ".editable" ).editable(  function(value) { return value },
  |       {
  |         type    : 'text',
  |         submit  : 'OK',
  |         select  : true,
  |         placeholder: '...'
  |       });
  |       event.preventDefault();
  |     });
  |   });
